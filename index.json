[{"categories":["服务器"],"content":"本文主要是讲解如何在 Linux 环境下离线安装以及测试杀毒软件 clamav 0.104.2（以CentOS7为例），包括下载安装、配置参数和运行。 Linux下杀毒软件clamav0.104.2离线安装及测试（CentOS7） ","date":"2022-03-05 21:03:00","objectID":"https://zz2summer.github.io/linux%E4%B8%8B%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6clamav%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8F%8A%E6%B5%8B%E8%AF%95centos7/:0:0","tags":["Linux","杀毒软件","ClamAV0.104.2","离线安装"],"title":"Linux下杀毒软件clamav离线安装及测试（CentOS7）","uri":"https://zz2summer.github.io/linux%E4%B8%8B%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6clamav%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8F%8A%E6%B5%8B%E8%AF%95centos7/"},{"categories":["服务器"],"content":"1.下载安装 clamav 官网下载 clamav-0.104.2.linux.x86_64.rpm 将该文件上传至服务器，安装命令如下： rpm -ivh --prefix=/usr/local/clamav clamav-0.104.2.linux.x86_64.rpm ","date":"2022-03-05 21:03:00","objectID":"https://zz2summer.github.io/linux%E4%B8%8B%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6clamav%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8F%8A%E6%B5%8B%E8%AF%95centos7/:1:0","tags":["Linux","杀毒软件","ClamAV0.104.2","离线安装"],"title":"Linux下杀毒软件clamav离线安装及测试（CentOS7）","uri":"https://zz2summer.github.io/linux%E4%B8%8B%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6clamav%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8F%8A%E6%B5%8B%E8%AF%95centos7/"},{"categories":["服务器"],"content":"2. 配置 添加用户组和组成员 groupadd clamav useradd -g clamav clamav 创建日志目录和病毒库目录 mkdir -p /usr/local/clamav/logs mkdir -p /usr/local/clamav/update 创建日志文件 touch /usr/local/clamav/logs/clamd.log touch /usr/local/clamav/logs/freshclam.log 文件授权 chown clamav:clamav /usr/local/clamav/logs/clamd.log chown clamav:clamav /usr/local/clamav/logs/freshclam.log chown clamav:clamav /usr/local/clamav/update 修改配置文件 cp /usr/local/clamav/etc/clamd.conf.sample /usr/local/clamav/etc/clamd.conf cp /usr/local/clamav/etc/freshclam.conf.sample /usr/local/clamav/etc/freshclam.conf 文件1：clamd.conf vim /usr/local/clamav/etc/clamd.conf #Example　//注释掉这一行 #添加以下内容 LogFile /usr/local/clamav/logs/clamd.log PidFile /usr/local/clamav/update/clamd.pid DatabaseDirectory /usr/local/clamav/update 文件2：freshclam.conf vim /usr/local/clamav/etc/freshclam.conf #Example　//注释掉这一行 #添加以下内容 DatabaseDirectory /usr/local/clamav/update UpdateLogFile /usr/local/clamav/logs/freshclam.log PidFile /usr/local/clamav/update/freshclam.pid 将这两个文件复制一下： cp /usr/local/clamav/etc/*.conf /usr/local/etc/ ","date":"2022-03-05 21:03:00","objectID":"https://zz2summer.github.io/linux%E4%B8%8B%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6clamav%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8F%8A%E6%B5%8B%E8%AF%95centos7/:2:0","tags":["Linux","杀毒软件","ClamAV0.104.2","离线安装"],"title":"Linux下杀毒软件clamav离线安装及测试（CentOS7）","uri":"https://zz2summer.github.io/linux%E4%B8%8B%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6clamav%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8F%8A%E6%B5%8B%E8%AF%95centos7/"},{"categories":["服务器"],"content":"3. 运行 下载病毒库文件并上传到目录 /usr/local/clamav/update main.cvd daily.cvd bytecode.cvd 注：也可以在有网络的机器上运行如下命令更新病毒库： /usr/local/clamav/bin/freshclam 配置库文件路径 vim /etc/ld.so.conf 追加一行： /usr/local/clamav/lib64 更新生效： ldconfig 如果最后运行时仍然报错： clamscan: error while loading shared libraries: libclamav.so.9: cannot open shared object file: No such file or directory 则说明配置没有生效。 创建命令软件链接 ln -s /usr/local/clamav/bin/clamscan /usr/local/bin/clamscan 运行使用 clamscan -r 卸载程序 rpm remove clamav ","date":"2022-03-05 21:03:00","objectID":"https://zz2summer.github.io/linux%E4%B8%8B%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6clamav%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8F%8A%E6%B5%8B%E8%AF%95centos7/:3:0","tags":["Linux","杀毒软件","ClamAV0.104.2","离线安装"],"title":"Linux下杀毒软件clamav离线安装及测试（CentOS7）","uri":"https://zz2summer.github.io/linux%E4%B8%8B%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6clamav%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8F%8A%E6%B5%8B%E8%AF%95centos7/"},{"categories":["Tools"],"content":"本文内容主要讲解如何利用 Hexo + Github Page 搭建个人博客，内容包含基本工具（Node.js、Git、Github、Hexo）的安装使用、如何利用Hexo进行发布、修改、删除文章、图片添加水印等细节。 本文修改自【韦阳】的博客《超详细Hexo+Github博客搭建小白教程》 原文链接：https://godweiyang.com/2018/04/13/hexo-blog/ 遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"快速搭建 已经搭建和配置好的模板：https://github.com/zz2summer/blog-hexo-theme-matery.git，下载后，先解压 node_modules.zip，然后删除 .git 如果出现bug，可能是npm版本等问题，可以把 node_moudules 文件删除，重新安装对应模块组件 ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:1:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"安装Node.js 官网下载：Node.js 安装直接点击 Next 即可 最后测试是否安装成功： 用 win + R 打开命令行提示符，输入 cmd，之后输入命令：node -v、npm -v，如果显示版本号即安装成功！ ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:2:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"添加国内镜像源 可以切换使用阿里的国内镜像对 npm 进行加速 # 设置自定义镜像命令 npm config set registry https://registry.npm.taobao.org # 查看npm源地址 npm config list # 删除自己设置的镜像命令 npm config rm registry ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:3:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"安装 Git 下载分布式版本管理工具 Git —— 主要用于之后把本地网页部署到 Github 上去 安装选项还是全部默认，只不过最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开git了。 安装完成后在命令提示符中输入git --version验证是否安装成功。 ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:4:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"注册 Github 打开https://github.com/，新建一个项目，如下所示： 然后如下图所示，输入自己的项目名字，后面一定要加.github.io后缀，README初始化也要勾上。名称一定要和你的github名字完全一样，比如你github名字叫abc，那么仓库名字一定要是abc.github.io。 然后项目就建成了，点击Settings，向下拉到最后有个GitHub Pages，点击Choose a theme选择一个主题。然后等一会儿，再回到GitHub Pages，会变成下面这样： 点击那个链接，就会出现自己的网页啦，效果如下： ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:5:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"安装Hexo 在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在H:\\blog目录下。 在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。 定位到该目录下，输入npm i hexo-cli -g安装Hexo。会有几个报错，无视它就行。 安装完后输入hexo -v验证是否安装成功。 然后就要初始化我们的网站，输入hexo init初始化文件夹，接着输入npm install安装必备的组件。 这样本地的网站配置也弄好啦，输入hexo g生成静态网页，然后输入hexo s打开本地服务器，然后浏览器打开http://localhost:4000/，就可以看到我们的博客啦，效果如下： 按ctrl+c关闭本地服务器。 ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:6:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"连接Github与本地 首先右键打开git bash，然后输入下面命令： git config --global user.name \"zz2summer\" git config --global user.email \"xxxxx@163.com\" 用户名和邮箱根据你注册github的信息自行修改。 然后生成密钥SSH key： ssh-keygen -t rsa -C \"summer2zz@163.com\" 按照提示直接一路回车即可。 打开 github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便。 git bash中输入 cat ~/.ssh/id_rsa.pub 将输出的内容复制到新建 SSH的框中，点击确定保存。 输入ssh -T git@github.com，如果如下图所示，出现你的用户名，那就成功了。 打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。 修改最后一行的配置： deploy: type: git repository: https://github.com/zz2summer/zz2summer.github.io branch: master repository修改为你自己的github项目地址。 ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:7:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"写文章、发布文章 首先在博客根目录下右键打开git bash，安装一个扩展npm i hexo-deployer-git。 然后输入hexo new post \"article title\"，新建一篇文章。 然后打开H:\\blog\\source\\_posts的目录，可以发现下面多了一个article-title.md文件，就是文章文件。 编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦。 如果需要上传图片，需要修改配置文件_config.yml来生成。 post_asset_folder: true 这样每次新建文件就会直接生成文章和同名文件夹，图片放到文件夹中再用相对路径引用图片即可。 ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:8:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"图片添加水印 为了防止别人抄袭你文章，可以把所有的图片都加上水印，方法很简单。 首先在博客根目录下新建一个watermark.py，代码如下： # -*- coding: utf-8 -*- import sys import glob from PIL import Image from PIL import ImageDraw from PIL import ImageFont def watermark(post_name): if post_name == 'all': post_name = '*' dir_name = 'source/_posts/' + post_name + '/*' for files in glob.glob(dir_name): im = Image.open(files) if len(im.getbands()) \u003c 3: im = im.convert('RGB') print(files) font = ImageFont.truetype('STSONG.TTF', max(30, int(im.size[1] / 20))) draw = ImageDraw.Draw(im) text_size_x, text_size_y = draw.textsize(u'@yourname', font=font) draw.text((im.size[0] - text_size_x, im.size[1] - text_size_y), u'@yourname', fill=(0, 0, 0, 85), font=font) im.save(files) if __name__ == '__main__': if len(sys.argv) == 2: watermark(sys.argv[1]) else: print('[usage] \u003cinput\u003e') 字体也放根目录下，自己找字体。（win10自带字体文件目录：C:\\Windows\\Fonts）然后每次写完一篇文章可以运行python watermark.py postname添加水印，如果第一次运行要给所有文章添加水印，可以运行python watermark.py all。 如果报错显示：ModuleNotFoundError: No module named 'PIL'，意思没有安装对应的 Python 模块，运行命令：pip install Pillow ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:9:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"修改样式 建议参考官方说明文档：hexo-theme-matery/README_CN.md at develop · blinkfox/hexo-theme-matery 详细而且是最新的。 注意区分博客的配置文件和主题的配置文件，基本上把两个配置文件浏览一遍，基本配置就改好了。 ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:10:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"文章基本操作 ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:11:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"发表文章 # 新建文章 hexo new post \"article title\" # 图片加水印 # 单篇文章 postname python watermark.py postname # 所有文章 python watermark.py all # 生成静态页面 hexo g # 本地预览 hexo s # 部署到网站 hexo d ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:11:1","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"修改文章 修改对应文章内容，然后执行命令 hexo d -g 即可。 ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:11:2","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"删除文章 删除目录 source\\_posts 下对应文章文件，然后执行命令 hexo d -g 即可。 ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:11:3","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"其他 多个标签：[标签1,标签2,标签3] 插入上传图片 将图片放置在在 .md 同级目录下的同名文件夹下，引用时直接写图片名即可，如：![](pic_name.png)，部署后该HTML页面和图片位于同级目录 将图片放置在在 source/images 目录下，引用时使用![](/images/pic_name.png) ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:11:4","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"Hexo 常见操作 # Create a new post $ hexo new \"My New Post\" # Run server $ hexo server # Generate static files $ hexo generate # Deploy to remote sites $ hexo deploy # 清空缓存并生成新的静态页面 hexo clean \u0026\u0026 hexo g ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:12:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"遇到的问题 因为开了代理，所以连接上可能会出现一些问题 Summer@DESKTOP-NU751AT MINGW64 /h/blog/themes $ git clone https://github.com/blinkfox/hexo-theme-matery.git Cloning into 'hexo-theme-matery'... fatal: unable to access 'https://github.com/blinkfox/hexo-theme-matery.git/': OpenSSL SSL_read: Connection was reset, errno 10054 Summer@DESKTOP-NU751AT MINGW64 /h/blog/themes $ git config --global http.proxy 127.0.0.1:8580 ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:13:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"参考文章 【1】超详细Hexo+Github博客搭建小白教程 | 韦阳的博客 【2】Hexo博客主题之hexo-theme-matery的介绍 | 闪烁之狐 【3】hexo-theme-matery/README_CN.md at develop · blinkfox/hexo-theme-matery ","date":"2021-03-28 14:30:49","objectID":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:14:0","tags":["Hexo","Github","个人博客"],"title":"Github + Hexo 搭建个人博客","uri":"https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"利用 Hugo + Github Page 搭建个人博客，主要流程和配置记录，包含：第一次搭建过程、日常文章操作、谷歌分析、访问计数、部署脚本、网站运行时间等细节优化和部分个人总结。","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"利用 Hugo + Github Page 搭建个人博客，主要流程和配置记录，包含：第一次搭建过程、日常文章操作、谷歌分析、访问计数、部署脚本、网站运行时间等细节优化和部分个人总结。 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"零、效果 本次配置最终效果图： 快速搭建方式，直接下载修改后的模板改也是可以的：https://github.com/zz2summer/blog-hugo-theme-LoveIt 完成步骤一、二、三，然后下载上述文件到 blog 目录下就可以跳过第四步了。 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:1:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"一、创建 Github 库 打开 Github ，新建一个库。 输入项目名，要与 Github 用户名一致。比如我的是 zz2summer，那么输入的 Repository name 就是 zz2summer.github.io，README 也一并勾选上。 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:2:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"二、安装 Hugo 和 Git 查阅 Hugo 安装指南：Install Hugo | Hugo，找到对应系统的安装操作。 基本上都是使用各个包工具安装，本人 Win10，比较嫌麻烦就直接下载使用。 打开 Github 中的 Hugo 库，打开右侧的 Realeases，下载最新的版本，本次下载为：hugo_extended_0.82.0_Windows-64bit.zip 下载 extened 版本是因为有些主题的需要利用进行 SCSS/SASS 构建，如果下普通版就可能会报错显示： you need the extended version to build SCSS/SASS 解压后，将其中的 hugo.exe 放到指定的安装目录，比如 D:\\softwares\\Hugo\\bin，然后将该目录添加到系统环境变量（win+R → sysdm.cpl → 高级 → 环境变量 → 系统变量 Path）的 Path 下。 打开命令行，输入 hugo version，显示版本号即为安装成功 本地下载 Git ，Win10直接下载 exe ，点击下一步就好了。 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:3:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"三、新建 Hugo 网站 新建一个目录，用于存放 Hugo 网站的文件，比如：H:\\HugoWebsite 打开命令行，切换到该目录，执行命令新建一个 Hugo 网站 # blog 是网站文件夹名 hugo new site blog ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:4:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"四、选择 Hugo 主题 打开 hugo theme 的网站，选择合适的主题，以Tranquilpeak 举例。 Hugo Themes: https://themes.gohugo.io 将选中的主题下载到本地 # 进入网站目录 blog cd blog # 进入 themes 目录，一般默认有，如果没有自行创建：mkdir -p themes cd themes # 下载主题到 tranquilpeak 文件夹下 git clone https://github.com/kakawait/hugo-tranquilpeak-theme.git tranquilpeak 此处建议选择的这个主题相较适合第一次尝试，配置文件比较详细明了。待熟悉后，可以自行选择主题。 Hugo主题库：https://themes.gohugo.io，个人推荐主题：https://github.com/dillonzq/LoveIt.git 在 Hugo 网站的根目录下（上文提及的 HugoWebsite）配置 config.toml 详细配置参考：hugo-tranquilpeak-theme/user.md at master · kakawait/hugo-tranquilpeak-theme 当前工作目录：H:\\HugoWebsite\\blog，备份 config.toml 原文件，然后将 themes/tranquilpeak/exampleSite/config.toml 复制过来覆盖原文件，打开 config.toml 阅读并修改配置 简单讲就是利用已经配置好的主题配置文件进行修改。 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:5:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"五、新建文章 进入网站文件夹根目录：H:\\HugoWebsite\\blog，鼠标右键选择 Git Bash Here 新建文章：first-post.md，**注意区分主题的要求，有些主题新建文章的目录是 posts ** hugo new post/first-post.md 编辑文章内容，保存。 启动 Hogo server hugo server -D 打开网址 http://localhost:1313/ 可以进行预览 如果发现预览效果不满意，可以 编辑 config.toml 文件 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:6:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"六、部署到 Github 构建 Hugo 网站 在 Hugo 网站文件夹的根目录（H:\\HugoWebsite\\blog）下执行 hugo 命令构建 Hugo 会将构建的网站内容默认保存至网站根目录下的 public/ 文件夹下。 将网站文件夹与 GitHub 建立联系**（仅第一次运行需要）** 进入 H:\\HugoWebsite\\blog\\public 目录，初始化 Git 库 生成的 HTML 文件保存在 “public” 目录中，“public” 文件夹会被转换为 Git 库。 git init 将 Git 本地库关联至远程库 在 H:\\HugoWebsite\\blog\\public 目录下，为 Git 本地库添加远程库，“git@github.com:your-github-id/your-github-id.github.io.git” git remote add origin git@github.com:zz2summer/zz2summer.github.io.git 提交修改 在 H:\\HugoWebsite\\blog\\public 目录下，通过如下命令提交： # 查看当前修改状态 git status # 添加修改过得文件， . 表示所有，也可以指定文件 git add . # \"\"里面的内容就是提交内容的说明信息 git commit -m \"first commit\" 提交修改至远程库 在 H:\\HugoWebsite\\blog\\public 目录下，通过如下命令提交： git push -u origin master 然后如果按照博客顺序操作，第一次应该失败的。 因为本地的 git 库和远程的库并不是一致的，需要进行一次 pull 操作才能继续 push。 第一种解决办法就是加参数 -f ，强制推送，但是这样很危险，会导致其他的更新提交失败，也就是说原来该库下所有文件都会被删除掉，只剩下本次提交的文件了。日常不建议这么操作，但是其实本次第一次是可以的，因为当前库下没有还没有有效文件。 git push -u -f origin master 第二种方案为：先把除 .git 文件夹外的所有文件复制到其他目录备份，然后 git pull 当前库下的文件下来，然后把这些文件和自己需要的文件结合处理好（本次就是删除这些文件，再把原文件复制回来），重新提交即可。日常推荐这种方法，养成好习惯。 # 1.移动除 .git 外的文件到另一个目录下 # 2.pull 该库当前文件，最后的参数是因为合并两个不相关的项目（即，不知道彼此存在并且提交历史不匹配的项目）时，会发生Git错误：fatal: refusing to merge unrelated histories，此时出现记录文件，先按住 ctrl+:，再输入 wq 即可。 git pull origin master --allow-unrelated-histories # 3.合并这些文件和第一次移动出去的文件，本次就是删除这些文件，把那些文件移动回来就好了 # 4.提交本地 git add . git commit -m \"first commit\" # 5.提交远程 git push -u origin master 好了，第一次初始化配置也就成功完成了！输入：https://zz2summer.github.io/ 就可以访问部署的网站了。 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:7:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"七、日常操作 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:8:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"1. 新建文章 # 1.新建一篇文章，在网站根目录：H:\\HugoWebsite\\blog hugo new post/第二篇测试博客.md # 2.在目录 H:\\HugoWebsite\\blog\\content\\post 下找到对应文件进行修改 # 3.本地预览, http://localhost:1313/ hugo server -D # 4.构建 Hugo 网站 hugo # 5.切换到目录 H:\\HugoWebsite\\blog\\public ，提交修改至本地库 git add . git commit -m 'commit info' # 6.将修改推至远程库 git push -u origin master ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:8:1","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"2. 修改文章 # 1.当前工作目录：H:\\HugoWebsite\\blog # 2.在目录 H:\\HugoWebsite\\blog\\content\\post 下找到对应文件 进行修改 # 3.本地预览, http://localhost:1313/ hugo server -D # 4.构建 Hugo 网站 hugo # 5.切换到目录 H:\\HugoWebsite\\blog\\public ，提交修改至本地库 git add . git commit -m 'commit info' # 6.将修改推至远程库 git push -u origin master ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:8:2","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"3. 删除文章 # 1.当前工作目录：H:\\HugoWebsite\\blog # 2.删除两处文件 在目录 H:\\HugoWebsite\\blog\\content\\post 、H:\\HugoWebsite\\blog\\public 下找到对应文件进行删除 其中 public 下文件不删除也不影响显示，只是该文件就会一直存在，另外该目录下即便文件（除.git)删错或者全部删除也是不影响的，应为 hugo 命令会全部重建 # 3.本地预览, http://localhost:1313/ hugo server -D # 4.构建 Hugo 网站 hugo # 5.切换到目录 H:\\HugoWebsite\\blog\\public ，提交修改至本地库 git add . git commit -m 'commit info' # 6.将修改推至远程库 git push -u origin master ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:8:3","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"4.添加图片 Hugo 的配置文件和文章中引用图片都是从static作为根目录的。（H:\\HugoWebsite\\blog\\static） 也就是说首先要将图片放置到 static 文件夹下，以 static 为相对路径，然后进行引用，方式为：![](pic_name.png)，当然这样该 .md 文件中是不会显示，本地预览和部署后是可以看到的 正常做法： 写文章时，在该文章目录下新建文件夹存放照片，引用时采用相对路径。 完成之后，在引用路径前加个 /，比如原来引用方式 ![](imgs/pic_name.png) ，需要修改为 ![](/imgs/pic_name.png) 。 之后将该图片文件夹移动到 static 目录下即可。 注意：如果该文件夹名包含空格可能会不能被显示，支持中文，但是不支持含空格。 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:8:4","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"5. 图片加水印 找一份字体放到根目录下（H:\\HugoWebsite\\blog）。 （win10自带字体文件目录：C:\\Windows\\Fonts） 创建 watermark.py 然后每次写完一篇文章可以运行python watermark.py postname添加水印。 如果第一次运行要给所有文章添加水印，可以运行python watermark.py all。 # -*- coding: utf-8 -*- import sys import glob from PIL import Image from PIL import ImageDraw from PIL import ImageFont def watermark(post_name): if post_name == 'all': post_name = '*' dir_name = 'static/' + post_name + '/*' for files in glob.glob(dir_name): im = Image.open(files) if len(im.getbands()) \u003c 3: im = im.convert('RGB') print(files) font = ImageFont.truetype('arial.ttf', max(30, int(im.size[1] / 20))) draw = ImageDraw.Draw(im) # draw.text((im.size[0] / 2, im.size[1] / 2), u'@yourname', fill=(0, 0, 0), font=font) text_size_x, text_size_y = draw.textsize(u'@yourname', font=font) draw.text((im.size[0] - text_size_x, im.size[1] - text_size_y), u'@yourname', fill=(0, 0, 0, 85), font=font) im.save(files) if __name__ == '__main__': if len(sys.argv) == 2: watermark(sys.argv[1]) else: print('[usage] \u003cinput\u003e') ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:8:5","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"八、细节优化 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:9:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"1.谷歌分析的配置 获取 跟踪ID，https://analytics.google.com/ 添加如下代码到 \u003chead\u003e 标签中 \u003c!-- Global site tag (gtag.js) - Google Analytics --\u003e \u003cscript async src=\"https://www.googletagmanager.com/gtag/js?id=UA-xxxxxxxxx-x\"\u003e\u003c/script\u003e \u003cscript\u003e window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-xxxxxxxxx-x'); \u003c/script\u003e ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:9:1","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"2. 添加访问计数 参考如下代码，添加到想要加入的位置即可。 显示单页面访问量 要显示每篇文章的访问量，复制以下代码添加到你需要显示的位置。 算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量。 \u003cspan id=\"busuanzi_container_page_pv\"\u003e 本文总阅读量\u003cspan id=\"busuanzi_value_page_pv\"\u003e\u003c/span\u003e次 \u003c/span\u003e 显示站点总访问量 要显示站点总访问量，复制以下代码添加到你需要显示的位置。有两种算法可选： 算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。 \u003cspan id=\"busuanzi_container_site_pv\"\u003e 本站总访问量\u003cspan id=\"busuanzi_value_site_pv\"\u003e\u003c/span\u003e次 \u003c/span\u003e 算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。 \u003cspan id=\"busuanzi_container_site_uv\"\u003e 本站访客数\u003cspan id=\"busuanzi_value_site_uv\"\u003e\u003c/span\u003e人次 \u003c/span\u003e 注：本地测试时数据会任意显示，部署后即正常 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:9:2","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"3.部署脚本 在目录 H:\\HugoWebsite\\blog 新建 deploy.sh ，在 Git bash 下运行：sh deploy.sh #!/bin/bash echo -e \"\\033[0;32mDeploying updates to GitHub...\\033[0m\" # Build the project. hugo # if using a theme, replace with hugo -t \u003cYOURTHEME\u003e # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\"rebuilding site `date` \" echo -e \"\\033[0;32m$msg\\033[0m\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master # Come Back up to the Project Root cd .. ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:9:3","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"4. 添加网站运行时间 在想要添加的位置（基本是 footer 文件）加入以下代码，其中开始运行的时间需要自行修改 \u003cscript\u003e function siteTime() { var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var today = new Date(); var startYear = 2021; var startMonth = 3; var startDate = 27; var startHour = 19; var startMinute = 15; var startSecond = 11; var todayYear = today.getFullYear(); var todayMonth = today.getMonth() + 1; var todayDate = today.getDate(); var todayHour = today.getHours(); var todayMinute = today.getMinutes(); var todaySecond = today.getSeconds(); var t1 = Date.UTC(startYear, startMonth, startDate, startHour, startMinute, startSecond); var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond); var diff = t2 - t1; var diffYears = Math.floor(diff / years); var diffDays = Math.floor((diff / days) - diffYears * 365); var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours); var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes); var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds); if (startYear == todayYear) { //document.getElementById(\"year\").innerHTML = todayYear; document.getElementById(\"sitetime\").innerHTML = \"已安全运行 \" + diffDays + \" 天 \" + diffHours + \" 小时 \" + diffMinutes + \" 分钟 \" + diffSeconds + \" 秒\"; } else { //document.getElementById(\"year\").innerHTML = startYear + \" - \" + todayYear; document.getElementById(\"sitetime\").innerHTML = \"已安全运行 \" + diffYears + \" 年 \" + diffDays + \" 天 \" + diffHours + \" 小时 \" + diffMinutes + \" 分钟 \" + diffSeconds + \" 秒\"; } } setInterval(siteTime, 1000); \u003c/script\u003e \u003cspan id=\"sitetime\"\u003e载入运行时间...\u003c/span\u003e ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:9:4","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"5. 图片放大功能 方法一： 部分主题自带了 lightgallery 效果，在配置文件设置为 true 即可。 方法二： 加载jqury和fancybox文件，在博客文件footer.html中添加下面的文件 \u003cscript src=\"https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.min.js\"\u003e\u003c/script\u003e \u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css\" /\u003e \u003cscript src=\"https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js\"\u003e\u003c/script\u003e 在博客文件中需要加载图片的地方插入下面html代码 \u003ca data-fancybox=\"gallery\" href=\"图片链接\"\u003e\u003cimg src=\"图片链接\"\u003e\u003c/a\u003e ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:9:5","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"九、总结 可以将主题下相关文件复制到 blog 网站根目录下，因为这样可以直接渲染网站效果，而又不影响主题本身的内容。 主要是 themes\\LoveIt\\exampleSite 目录下文件 发布文章如果有参数 draft ，记得将值设为 false，或者删除 draft，不然会被认定为草稿只能本地运行而不能运行到网站上。 基本上就是安装 Hugo ，建站，下载主题，配置主题参数，然后部署就是了。 ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:10:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Tools"],"content":"参考文章 【1】How To Build A Personal Website with Hugo | Matteo Courthoud 【2】使用Hugo和GitHub搭建博客. 折腾了几天博客的框架终于搭建起来了。研究了一番之后，最终还是选择使用Hugo和G… | by Félix | Medium 【3】如何利用 GitHub Pages 和 Hugo 轻松搭建个人博客？ - 知乎 【4】把博客从 Hexo 迁移到 Hugo - jdhao’s blog ","date":"2021-03-28 13:14:16","objectID":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:11:0","tags":["Hugo","Github","个人博客"],"title":"Github Pages + Hugo 搭建个人博客","uri":"https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":[],"content":"新建 ","date":"2021-03-27 21:56:20","objectID":"https://zz2summer.github.io/about/:0:0","tags":[],"title":"About","uri":"https://zz2summer.github.io/about/"},{"categories":["软件工程"],"content":"本文内容主要是讲解软件工程基础中实验四，根据课程管理对象类图，采用Java在Eclipse下编码实现，并用JUnit框架对某Java类进行测试。针对某网站，采用selenium或SilkTest或SilkPerformer分别进行功能测试和性能测试。（选做）","date":"2019-08-04 19:06:55","objectID":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C4%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/","tags":["软件工程基础","实验4","系统实现"],"title":"软件工程基础 实验4《系统实现》","uri":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C4%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/"},{"categories":["软件工程"],"content":"本文内容主要是讲解软件工程基础中实验四，根据课程管理对象类图，采用Java在Eclipse下编码实现，并用JUnit框架对某Java类进行测试。针对某网站，采用selenium或SilkTest或SilkPerformer分别进行功能测试和性能测试。（选做） 实验4《系统实现》 一、实验目的 掌握：系统实现的有关技术及其相关工具。 二、实验内容 试对图3所示的课程管理对象类图，采用Java在Eclipse下编码实现，并用JUnit框架对某Java类进行测试。 图3 类图 针对某网站，采用selenium或SilkTest或SilkPerformer分别进行功能测试和性能测试。（选做） 三、实验方法 利用pycharm工具，python代码实现该课程管理系统； 利用python中的doctest和unittest等测试工具对系统中的代码进行测试。 四、实验步骤  4.1 需求说明： 课程管理系统  A、管理员：  创建老师：姓名、性别、年龄、资产  创建课程：课程名称、上课时间、课时费、关联老师 使用pickle保存在文件  B、学生：  学生：用户名、密码、性别、年龄、选课列表[]、上课记录  1、列举所有课程  2、选择课程  3、学生上课，  4、ret = 课程.work() 获取课程的返回; 资产+=课时费  4.2 代码思路  1.类的关联：  a、Teacher类：关联管理员，由哪个管理员创建  b、 Course类：关联老师对象、管理员对象（注意：关 联的是对象）  2.文件的写入：  a、管理员文件：写入的是管理员对象（封装管理员的用户名和密码）  b、学生文件：写入的是学生对象（封装了学生已选课程列表，已经上过的课程字典：key：课程对象 value：上课信息列表，是列表格式）  c、课程列表course_list、老师列表teacher_lis，都是列表格式。  4.3 文件概述  bin目录：存放administrator.py文件和students.py文件  config目录：存放settings.py文件，即配置文件  db目录：存放与数据相关的文件，包括课程列表course_list、老师列表teacher_list、学生文件夹、管理员文件夹  lib目录：存放models.py文件，即存放公共的模块  log目录：存放日志文件  4.4 代码实现  4.5 代码测试 五、实验结果  5.1 利用doctest测试students.py中的登录模块 def login(user, pwd): \"\"\" \u003e\u003e\u003e login(\"\",\"\") 用户账号或者密码输入为空 \u003e\u003e\u003e login(\"a\",\"1\") 账号或者密码错误 \u003e\u003e\u003e login(\"a\",\"123\") 登录成功 \"\"\" if (\"\".__eq__(user) | \"\".__eq__(pwd)): print('用户账号或者密码输入为空') else: if (\"a\".__eq__(user) \u0026 \"123\".__eq__(pwd) ): # 如果登陆成功 print(\"登录成功\") else: print('账号或者密码错误') if __name__ == '__main__': import doctest doctest.testmod(verbose=True)  测试结果：  结果分析：测试结果显示三个测试均成功通过，在用户登录时该模块能够对用户的输入进行正常判断，比如判空、账号密码核实。  5.2 利用unittest测试modules.py文件中的老师类Teacher teacher.py： import time class Teacher: \"\"\" 封装老师的相关信息 \"\"\" def __init__(self, name, age, admin): self.name = name self.age = age self.__assets = 0 self.create_time = time.strftime('%Y-%m-%d%H:%M:%S') self.create_admin = admin def gain(self, cost): \"\"\" 增加资产 :param cost: 增加的数量 :return: \"\"\" self.__assets += cost return self.__assets def decrease(self, cost): \"\"\" 减少资产 :param cost: 减少的数量 :return: \"\"\" self.__assets -= cost return self.__assets  unittestTeacher.py： import unittest from teacher import * class Test_teacher(unittest.TestCase): def setUp(self): print('test kick on') self.obj = Teacher(\"张三\",35,\"胡主任\") def test_gain(self): self.assertEqual(15,self.obj.gain(15)) print('test gain') def test_decrease(self): self.assertEqual(10,self.obj.decrease(5)) print('test decrease') def tearDown(self): print('test is over') if __name__=='__main__': unittest.main()  测试结果：  结果分析：根据结果显示，其中测试中两个通过，一个失败，在用户创建老师类时能够成功创建，增加资产时以初始态0为基础，所以加上15等于15，测试通过，但是减少资产时依旧以0为基础，所以此处减少后为-5，而不等于10，测试未通过。 六、实验结论  本次实验测试是进行抽样测试，根据不同的测试方式进行不同测试，测试样例、结果和结果分析见第五点显示，通过该实例测试方式可对本程序其余模块进行测试，从而验证所以模块的正确性。  根据本次测试结果，可知，对python进行不同方式的测试很有必要，因为测试是提高代码质量和可维护性的一种方式，也是成本最低的一种方式，尽早排除尽可能出现的bug，可以减少在后续阶段解决bug的成本（包括时间成本、人力成本等）。  项目源码展示如下：  6.1 配置文件settings.py import os BASE_DIR = os.path.dirname(os.path.dirname(__file__)) #配置文件的上级目录 BASE_ADMIN_DIR = os.path.join(BASE_DIR, \"db\", \"admin\") #管理员目录 BASE_STUDENTS_DIR = os.path.join(BASE_DIR, \"db\", \"students\") #学生目录 TEACHER_DB_DIR = os.path.join(BASE_DIR, \"db\", \"teacher_list\") #老师列表目录 COURSE_DB_DIR = os.path.join(BASE_DIR, \"db\", \"course_list\") #课程列表目录  6.2 公共模块modules.py #!/usr/bin/env python # -*- coding:utf-8 -*- import random import time import pickle from config import settings import os class Teacher: \"\"\" 封装老师的相关信息 \"\"\" def __init__(self, name, age, admin): self.name = name self.age = age self.__assets = 0 self.create_time = time.strftime('%Y-%m-%d%H:%M:%S') self.create_admin = admin def gain(self, cost): \"\"\" 增加资产 :param cost: 增加的数量 :return: \"\"\" self.__assets += cost def decrease(self, cost): \"\"\" 减少资产 :param cost: 减少的数量 :return: \"\"\" self.__assets -= cost class Course: \"\"\" 课程相关信息 \"\"\" def __init__(self, course_name, cost, teacher_obj, admin): self.course_name = course_name self.cost = cost self.teacher = teacher_obj self.create_time = time.strftime('%Y-%m-%d%H:%M:%S') self.create_admin = admin def have_lesson(self): \"\"\" 课程上课，自动给相关联的任课老师增加课时费 :return: 课程内容返回给上课者 \"\"\" self.teacher.gain(self.cost) content = random.randrange(10, 100) r = time.strftime('%Y-%m-%","date":"2019-08-04 19:06:55","objectID":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C4%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/:0:0","tags":["软件工程基础","实验4","系统实现"],"title":"软件工程基础 实验4《系统实现》","uri":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C4%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/"},{"categories":["软件工程"],"content":"本文内容主要是讲解软件工程实验三——试针对实验二的培训中心管理系统，试用结构化设计方法对其进行设计，并用Visio绘制其对应的软件结构图。（选做）根据某室内保温系统的描述，试据此对系统进行设计，采用Rational Rose绘制控制器的状态图，同时用顺序图描述锅炉启动过程。","date":"2019-08-04 18:54:30","objectID":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C3%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/","tags":["软件工程基础","实验3","系统设计"],"title":"软件工程基础 实验3《系统设计》","uri":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C3%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"},{"categories":["软件工程"],"content":"本文内容主要是讲解软件工程实验三——试针对实验二的培训中心管理系统，试用结构化设计方法对其进行设计，并用Visio绘制其对应的软件结构图。（选做）根据某室内保温系统的描述，试据此对系统进行设计，采用Rational Rose绘制控制器的状态图，同时用顺序图描述锅炉启动过程。 实验3《系统设计》 一、实验目的 掌握：结构化数据流设计技术、面向对象设计技术； 掌握：Visio工具绘制软件结构图； 掌握：EA或Visio工具绘制UML模型图。 二、实验内容 试针对实验二的培训中心管理系统，试用结构化设计方法对其进行设计，并用Visio绘制其对应的软件结构图。（选做） 某室内保温系统的描述如下：  如果主开关置于“加热”状态，保温系统的控制器负责开关锅炉，监视锅炉系统的燃油流量和燃烧状态，进而调节进入房间的热流量。当室内温度降至（Tr-2）度以下，控制器启动锅炉。这里Tr 是用户设定的理想室温。锅炉启动过程如下：  （1）控制器向锅炉的马达发送信号；  （2）控制器监视马达速度。马达达到正常操作速度时，启动点火并打开油阀；  （3）控制器监视水温， 一旦水温达到预定值， 发信号打开水流循环阀。热水开始在室内循环。  （4）如果发生异常情况，燃油流量指示器和光感器向控制器发信号。此时控制器发信号关闭系统。  （5）一旦室内温度达到（Tr-2）度，控制器首先关闭油阀，延迟5秒钟后关闭锅炉马达。  系统须满足以下限制：  （1）锅炉停机后重启必须延迟5秒钟；  （2）在主开关关闭或油阀关闭5秒钟内应指示锅炉停机。  试据此对系统进行设计，采用Rational Rose绘制控制器的状态图，同时用顺序图描述锅炉启动过程。 三、实验方法  本次实验方法主要是利用Visio工具绘制软件结构图、状态图和顺序图；  实验原理是根据题目要求及图形要求进行绘制；  实验技术是Visio绘制；  实验方案是先根据题目要求将题目中的要求标志出来，然后记录所要绘制的图形的注意事项，再进行初稿绘制，初稿绘制完成后进行图形要点检查，最后进行图形展示优化。 四、实验步骤  Visio建立软件结构图的基本步骤： 先添加函数/子例程； 再添加有条件调用； 然后添加调用连线； 最后为调用线添加数据流或标志流。  Visio建立活动图的基本步骤： 打开Visio2010工具，选择【文件】→【新建】→【活动图】→【UML活动图】→【创建】，即可创建一个UML活动模板，之后在左侧选择适当图形进行UML活动图绘制；  Visio建立顺序图的基本步骤同建立活动图。 五、实验结果 实验二中的培训中心管理系统的软件结构图如下所示： 控制器的状态图如下所示： 锅炉启动过程的顺序图如下所示： 六、实验结论  本次实验主要是对项目进行系统设计，有软件结构图、状态图和顺序图等，通过一系列建模从而对项目实施路程更加了解，更加有利于项目计划开展。  实验结果的截图见第五点。 七、实验小结  给出本次实验的体会，如学会了什么，遇到哪些问题，如何解决这些问题，存在哪些有待改进的地方。  通过本次实验我主要学会了如何对项目进行系统设计，对系统整体进行抽象，提取出自己所关心的内容，从而有利于项目后续开发。软件架构图主要是展示项目的主要框架，有利于对项目的总体进行分析规划，活动图和顺序图主要是对系统的进一步解析，有利于系统的实际开发。  实验中遇到的问题主要是对图形的组件不够清楚，通过查阅书籍和网络资料解决，还有就是有一部分内容不能清晰表示，与同学课后交流解决。  实验存在的不足主要是图形中的关系不够了解，有一些地方可能存在错误。 参考文章：【1】软件工程基础实验 - 百度文库 ","date":"2019-08-04 18:54:30","objectID":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C3%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/:0:0","tags":["软件工程基础","实验3","系统设计"],"title":"软件工程基础 实验3《系统设计》","uri":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C3%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"},{"categories":["软件工程"],"content":"本文内容主要是讲解软件工程试验三——某培训中心要研制一个计算机管理系统，根据描述中找出绘制数据流图的四种成分并用Visio绘制数据流图。有一简单选课系统，用文字描述如下，试用IDEF1X图和UML类图描述该系统的信息模型，并用Visio或EA绘制该IDEF1X图和UML类图。请用Visio或EA绘制如图2所示的用例图。","date":"2019-08-04 18:43:07","objectID":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C2%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/","tags":["软件工程基础","实验2","需求分析"],"title":"软件工程基础 实验2《需求分析》","uri":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C2%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"},{"categories":["软件工程"],"content":"本文内容主要是讲解软件工程试验三——某培训中心要研制一个计算机管理系统，根据描述中找出绘制数据流图的四种成分并用Visio绘制数据流图。有一简单选课系统，用文字描述如下，试用IDEF1X图和UML类图描述该系统的信息模型，并用Visio或EA绘制该IDEF1X图和UML类图。请用Visio或EA绘制如图2所示的用例图。 实验2《需求分析》 一、实验目的 了解：软件项目需求分析的基本原理与方法； 掌握：用例建模方法、数据流建模方法和IDEF1X数据建模方法； 掌握：Visio/EA等工具绘制模型图。 二、实验内容  1、请从下面的描述中找出绘制数据流图的四种成分并用Visio绘制数据流图。  某培训中心要研制一个计算机管理系统。它的业务是：将学员发来的信件收集分类后，按几种不同的情况处理。  （1) 如果是报名的，则将报名数据送给负责报名事务的职员，他们将查阅课程文件，检查该课程是否额满，然后在学生文件、课程文件上登记，并开出报告单交财务部门，财务人员开出发票给学生。  （2) 如果是想注销原来已选修的课程，则由注销人员在课程文件、学生文件和帐目文件上做相应的修改，并给学生注销单。  （3）如果是付款的，则由财务人员在帐目文件上登记，也给学生一张收费收据。  2、 有一简单选课系统，用文字描述如下，试用IDEF1X图和UML类图描述该系统的信息模型，并用Visio或EA绘制该IDEF1X图和UML类图。  1）基本描述：在该系统中，有学院、教师、课程、学生等实体，他们的属性分别是：  学院：学院编号、学院名称、地址、联系电话、院长等基本属性；  教师：教师编号、姓名、性别、年龄、职称、所在学院等属性；  课程：课程编号、课程名称、课程性质（必修/选修）、学分、开课学院等属性；  学生：学号、姓名、性别、年龄、入学时间、学院等属性。  教学班实体：教学班号、上课教师、课程、上课学期、上课时间、上课周次。  2）功能需求如下：  （1）能完成基本信息的维护：即各实体的基本信息的增、删、改、查。  （2）排课：为教师安排一学期所上的课程。一位教师在一学期可以上一门课或多门课，也可以不上课；一门课可以有多个教师上，但是不同的教师上的课应该属于不同的教学班。  （3）学生选课：学生根据教学要求进行选课。在学生选课之前检查该学生是否有选课资格（比如是否欠费、前期课程是否修完并通过）；一个学生可以选多门课、一门课可以被多个学生选修，但是一个学生不能选择同一门课的不同教学班；如果学生选了一门课的某个教学班后再选该门课的其他教学班系统应做出出错提示；统计已选教学班的学生人数；一个教学班的选课名额有限；学生选课后，如果发现选课不合理可以退选、重选；选课结束后应提供打印课程表的功能。  3、请用Visio或EA绘制如图2所示的用例图。 图2 用例图 三、实验方法  运用Visio2010工具进行数据流图、UML图和IDEF1X图设计。 四、实验步骤  1．打开Visio2010工具，选择【文件】→【新建】→【数据流】→【数据流图表】→【创建】，即可创建一个数据流图模板，之后在左侧即可选择适当图形进行数据流图绘制；  2．根据实验1要求，绘制数据流图，先按照各成分绘制，之后再将相关部分进行联系，并调整整体展示效果；  3．新建UML类图，按要求完成实验2-1；  4．新建IDEF1X图，按要求完成实验2-2；  5．新建用例图，按要求完成实验3。 五、实验结果  1．实验1数据流图如下所示：  2．实验2的UML图如下所示：  3．实验2的IDEF1X图如下所示：  4．实验3的用例图如下所示：  采购人员可以登录系统、形成订单、取消订单、填写订单、检查报价、提交需求表；  顾客可以形成订单；  部门主管可以签写报表；  财务人员可以查询财务数据、检查基本价格表、核实预售表、核实预售单；  开单员可以把自己所能查看到的信息打印出来，比如单据和提货单；  仓库员维护着整个仓库的入库出库状况，负责开出库单，审核入库单，打印导出数据等功能；  物流员可以把自己所能查看到的信息打印出来，比如加工单、运输单、入库单等； 六、实验结论  本次实验主要是对项目进行需求分析建模，有数据流图、UML图和IDEF1X图等，通过一系列建模从而对需求更加了解，也更加有利于项目计划开展。  实验结果的截图和文字分析见第五点。 七、实验小结  通过本次实验主要学会了绘制一些项目中常见的模型，比如数据流图、UML图、IDEF1X和用例图等，通过模型进而对需求进行抽象，得到自己所关心得部分，从而有利于项目的开发进行。  实验中遇到的主要问题是模型绘制的注意事项不是很了解，比如IDEF1X的实体如何分类、如何定义实体间的联系等，解决方式主要是通过对书本的反复阅读以及案例分析，其次就是一部分关系无法确定如何将在模型中展示，这个主要是与同学交流解决。  待改进的主要是实验2中有部分要求无法在规定的模型中展示，后续考虑通过其他模型进行展示，还有就是用例图中关系没有充分的完全展示出来，有待进一步优化。 ","date":"2019-08-04 18:43:07","objectID":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C2%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/:0:0","tags":["软件工程基础","实验2","需求分析"],"title":"软件工程基础 实验2《需求分析》","uri":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C2%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"},{"categories":["软件工程"],"content":"本文内容主要是讲解软件项目可行性研究及项目计划的基本原理与方法，利用Visio等工具进行可行性研究和制定项目计划。通过对图书馆管理系统的基本流程进行描述举例。","date":"2019-08-04 18:02:04","objectID":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C1%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6%E4%B8%8E%E9%A1%B9%E7%9B%AE%E8%AE%A1%E5%88%92/","tags":["软件工程基础","实验一","可行性研究与项目计划"],"title":"软件工程基础 实验1《可行性研究与项目计划》","uri":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C1%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6%E4%B8%8E%E9%A1%B9%E7%9B%AE%E8%AE%A1%E5%88%92/"},{"categories":["软件工程"],"content":"本文内容主要是讲解软件项目可行性研究及项目计划的基本原理与方法，利用Visio等工具进行可行性研究和制定项目计划。通过对图书馆管理系统的基本流程进行描述举例。 实验1《可行性研究与项目计划》 一、实验目的 了解：软件项目可行性研究及项目计划的基本原理与方法； 掌握：Visio等工具进行可行性研究和制定项目计划。 二、实验内容  图书管管理系统更便于对图书进行分类和管理，对借阅者进行时间限定，使得借书的效益更高更安全。提高工作效益，便于操作，能有效地对数据进行更新、查询，并能在一定程度上实现了自动化。图书管管理系统的主要功能为：书目管理、借阅证管理、借还图书、查询、缴费。书目管理主要是针对管理员身份而言的（比如新增书目，删除书目等等）；借阅证管理分为五部分：注册、补发、挂失、暂停、注销；借还图书：借书、还书；查询：图书查询、借阅时间；缴费主要是计算超期罚款并交纳费用。  图书管管理系统的系统流程图如图1所示。 图1 系统流程图  试对系统进行可行性研究，用Visio绘制图书馆管理系统的系统流程图，同时制定系统的开发计划，用Gantt图和时间线图描述进度计划安排。  实验内容分点描述： 对图书馆管理系统进行分析，用Visio绘制图书馆管理系统的系统流程图； 制定图书馆管理系统的开发计划； 用Gantt图描述进度计划安排； 用时间线图描述项目进度开发计划。 三、实验方法 运行快速应用开发模型（RAD）对图书馆管理系统进行开发分析； 根据实验内容即项目需要对项目进行建模分析； 使用Visio工具对图书管理系统进行建立系统流程图、Gantt图、时间线图； 使用第3步绘制的各个模型对项目进行进一步的开发可行性分析和计划分析。 四、实验步骤 对图书馆管理系统进行开发可行性分析及需求分析，记录所有功能模块； 利用功能模块对系统进行总体系统流程图设计，即图书馆管理系统系统流程图； 2.1 利用Visio工具，选择【文件】→【新建】→【流程图】→【工作流程图】→【创建】，即可创建一个系统流程图模板； ​ 2.2 在左侧栏目选择【更多形状】→【流程图】→【基本流程图形状】，这样便可以在左下侧看到绘制系统流程图的许多基本形状； 2.3 根据【基本流程图形状】、【工作流程对象】和之前了解的系统功能需求，即可自由选择图形并加上文字形成系统流程图初稿； 2.4 对系统流程图加上箭头表明系统功能开发方向； 2.5 对系统流程图进行排版样式设计，命名自然，要有艺术性的美观。 对图书馆管理系统进行细分，分为学生模块和管理员模块，分别完成两个模块的系统流程图； 完成学生模块系统流程图，参考图书馆管理系统系统流程图设计（第2点）； 完成管理员模块系统流程图，参考图书馆管理系统系统流程图设计（第2点）； 对项目进行开发进度规划，完成Gantt图绘制； 6.1 利用Visio工具，选择【文件】→【新建】→【甘特图】→【甘特图】→【创建】，即可创建一个Gantt图模板； 6.2 根据选项设置人物数目、持续时间选项、时间刻度范围和时间单位； 6.3 设置任务名称、开始时间、完成时间、持续时间等； 6.4 Gantt图中的任务数目、时间等信息均可使用鼠标右键进行再调整； 6.5 设置Gantt图的标题，对Gantt图进行样式调整。 根据项目开发计划绘制的Gantt图，完成项目开发的时间线图绘制； 7.1 利用Visio工具，选择【文件】→【新建】→【日程表】→【日程表】→【创建】，即可创建一个时间线图模板，在模板左下侧有许多可使用的日程表形状； ​ 7.2 在左下侧先选择一个日程表形状，之后设置此日程表的时间段和刻度等信息； 7.3 从左下侧选择任意里程碑形状，拖入到绘图页； 7.4 在配置框中对该里程碑进行日期、时间、说明等信息设置； 7.5 在页面左下角选择间隔块推入到绘图页中； 7.6 在间隔块配置框中设置开始时间、结束时间和说明等信息； 7.7 选择左侧的【更多形状】→【日程安排】→【甘特图形状】→【标题】，对时间线图进行标题设置； 7.8 点击【日程表形状】，选择左下侧形状中【“今日”标志】，拖到绘图页中的今天； 7.9 调整时间线图的中里程碑等形状大小样式等。 根据实验成果，分析并得出结论，完成实验报告书写。 五、实验结果 绘制了图书馆管理系统系统流程图； 5-1图书馆管理系统流程图 5-2 图书馆管理系统流程图——学生模块 5-3 图书馆管理系统流程图——管理员模块 绘制了图书馆管理系统的Gantt图； 5-4 图书馆管理系统之Gantt图 绘制了图书馆管理系统开发计划的时间线图。 5-5 图书馆管理系统开发计划之时间线图 六、实验结论  本次实验主要是对图书馆管理系统进行开发计划分析，通过绘制模型进行更加高效开发，成果主要为第五点所示的图书馆管理系统流程图、Gantt图、时间线图。  通过对绘制的五个模型加以分析，更加确定了图书馆管理系统的开发可行性以及具体的开发流程。将项目开发中许多的不可预估的事情转化为了可预估事情，有利于项目的具体实施开展。 七、实验小结  通过本次实验，主要是学会了对于项目进行建模分析，比如系统流程图、Gantt图、时间线图等等，以各个模型为基础，进一步有利于项目的开发进行与实际落实。  在本次实验过程中，遇到的问题主要是对Visio工具的使用不太熟悉，有许多模型的各个组件不知如何设计，所以模型存在一定不足。  解决方式主要为利用老师上传的PPT、视频进行自主学习，或者通过谷歌进行搜索然后多次尝试解决、  实验的不足之处主要是各个模型可能不全面，缺少某个部件，还有就是部分设计可能未完全规划好。问题原因在于对Visio绘图工具的使用过少，后续将继续学习，加强锻炼，进而对各个模型进行完善。 ","date":"2019-08-04 18:02:04","objectID":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C1%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6%E4%B8%8E%E9%A1%B9%E7%9B%AE%E8%AE%A1%E5%88%92/:0:0","tags":["软件工程基础","实验一","可行性研究与项目计划"],"title":"软件工程基础 实验1《可行性研究与项目计划》","uri":"https://zz2summer.github.io/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C1%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6%E4%B8%8E%E9%A1%B9%E7%9B%AE%E8%AE%A1%E5%88%92/"}]